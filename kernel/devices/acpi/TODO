tidy up current parsing,
DONE use nextSymbol more
make error messaging better
merge parses

DONE rename amlopcodes to amltypes
DONE remove default in switch

subParser

in amlparser extend each type with an init method that reads from the byte stream

* Dont use recursion

AML parser

- Heavy use of types to get compiler to validate everything

DONE - Avoid default case in switch as reduces validation of any new cases added

- switch/case for tables as created at compile time with extra checking and optimistion

- protocol just used to mark types for now

- avoid as many runtime checks that could be done as compile checks


- NotOp needs to take a second opcode as a param - Why??

- Need to deal with generic TermArg since its used for specifci types (=> Integer)


AML interpreter/bytecode



-- Sections

- Modeling AML Types

- extensions for Custom string, outputing model

- parsing#3



Expand names re Scope
Max subparser recursion depth
TermArg return type Integer, String etc
Simplify parseArgs etc and merge with Var args
Scope modifiers dont need to store the objectList



- Fix RegionSpace read/write at bitOffset
- merge If/ElseIf/ElseIf/Else blocks
- Fix dual invokeMethods, should only be one
- AMLDefOpRegion Should probably be a class and try to allocate its own region at init()
- Fix enums to have lowercase first letter
- use parseTermArgAsInteger for any type that takes a TermArg => Integer
