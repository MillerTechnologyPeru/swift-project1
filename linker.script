ENTRY(main)
OUTPUT_FORMAT("elf64-x86-64", "elf64-x86-64", "elf64-x86-64")

PAGE_SIZE = 0x1000;
/* Needs to be bigger for DEBUG mode, can be 2 for non debug */
STACK_SIZE = 3 * PAGE_SIZE;

SECTIONS
{
  /* 256TB - 512GB + 1MB */
  .text.start (0xffffffff80100000) : {
    _kernel_start = .;
    _text_start = .;
    *(.text .text.*)
  }


/*  .rela.init      : { *(.rela.init) }
  .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
  .rela.fini      : { *(.rela.fini) }
  .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
  .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
  .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
  .rela.tdata     : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
  .rela.tbss      : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
  .rela.ctors     : { *(.rela.ctors) }
  .rela.dtors     : { *(.rela.dtors) }
  .rela.got       : { *(.rela.got) }
  .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
  .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
  .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
  .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
  .rela.ifunc     : { *(.rela.ifunc) } */
  .rela.plt :{
      *(.rela.plt)
      PROVIDE_HIDDEN (__rela_iplt_start = .);
      *(.rela.iplt)
      PROVIDE_HIDDEN (__rela_iplt_end = .);
  }


 .got : {    *(.got) *(.igot) }
 .got.plt : {   *(.got.plt)  *(.igot.plt) }
 .plt            : { *(.plt) *(.iplt) }
 .plt.got        : { *(.plt.got) }
 .plt.bnd        : { *(.plt.bnd) }

  .init : {
    KEEP (*(SORT_NONE(.init)))
  }
  PROVIDE(_text_end = .);


  .rodata : ALIGN(0x1000) {
    _rodata_start = .;
    *(.rodata .rodata.*)
  }

  .preinit_array : {
    PROVIDE_HIDDEN (__preinit_array_start = .);
    KEEP (*(.preinit_array))
    PROVIDE_HIDDEN (__preinit_array_end = .);
  }
  .init_array : {
    PROVIDE_HIDDEN (__init_array_start = .);
    KEEP (*(SORT_BY_INIT_PRIORITY(.init_array.*) SORT_BY_INIT_PRIORITY(.ctors.*)))
    KEEP (*(.init_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .ctors))
    PROVIDE_HIDDEN (__init_array_end = .);
  }
  .fini_array : {
    PROVIDE_HIDDEN (__fini_array_start = .);
    KEEP (*(SORT_BY_INIT_PRIORITY(.fini_array.*) SORT_BY_INIT_PRIORITY(.dtors.*)))
    KEEP (*(.fini_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .dtors))
    PROVIDE_HIDDEN (__fini_array_end = .);
  }
  PROVIDE(_rodata_end = .);

  .swift2_protocol_conformances : {
    .swift2_protocol_conformances_start = . ;
    QUAD(SIZEOF(.swift2_protocol_conformances) - 8) ;
    *(.swift2_protocol_conformances) ;
  }

  .swift2_type_metadata : {
    .swift2_type_metadata_start = . ;
    QUAD(SIZEOF(.swift2_type_metadata) - 8) ;
    *(.swift2_type_metadata) ;
  }

  .data : ALIGN(0x1000) {
    _data_start = .;
    *(.data .data.*)
    _data_end = .;
  }

 /* Thread Local Storage sections  */
  .tdata          : { *(.tdata .tdata.* .gnu.linkonce.td.*) }
  .tbss           : { *(.tbss .tbss.* .gnu.linkonce.tb.*) *(.tcommon) }

  .bss ALIGN(0x1000) : {
    _bss_start = .;
    *(.bss..allocated_pages)
    *(.bss .bss.*)
    *(COMMON)
    . = ALIGN(PAGE_SIZE);
    _guard_page = .;
    . += PAGE_SIZE;
    _stack_start = .;
    . += STACK_SIZE;
    _kernel_stack = .;          /* Top of stack so label comes after */
    . += PAGE_SIZE;
    _ist1_stack_top = .;
    _heap_start = .;
    . = ALIGN(0x900000);
    _heap_end = .;

    _bss_end = .;
  }

  . = ALIGN(PAGE_SIZE);
  _kernel_end = .;
}
